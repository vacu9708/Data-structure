// -----C++ (using class)
#include <iostream>
#include <string>
using namespace std;

class my_SLL {
public:
	class Node {
	public:
		int data;
		Node* next = NULL;
	};

	Node* head = 0;
	Node* rear = 0;

	Node* new_node(int data) {
		Node* node = new Node;
		node->data = data;
		return node;
	}

	void push_front(int data) {
		if (head == 0) { // If there are no nodes
			head = rear = new_node(data);
			return;
		}

		Node* prev_head = head;
		head = new_node(data);
		head->next = prev_head;
	}

	void push_back(int data) {
		if (head == 0) { // If there are no nodes
			head = rear = new_node(data);
			return;
		}

		rear->next = new_node(data);
		rear = rear->next;
	}

	void insert(int index, int data) {
		Node* cralwer = head, * prev_cralwer = NULL;

		if (head == 0) {
			printf("Can't be inserted : Empty list");
			return;
		}

		for (int i = 0; i < index; i++) { // Go to the node to insert
			prev_cralwer = cralwer;
			cralwer = cralwer->next;

			if (cralwer == 0) {
				printf("Can't be inserted : Out of range\n");
				return;
			}
		}

		if (cralwer == head) { // When inserting at head
			head = new_node(data);
			head->next = cralwer;
		}
		else {
			prev_cralwer->next = new_node(data);
			prev_cralwer->next->next = cralwer;
		}
	}

	void delete_node(int index) {
		Node* cralwer = head, * prev_cralwer = NULL;

		if (head == 0) {
			printf("Can't be deleted : Empty list");
			return;
		}

		for (int i = 0; i < index; i++) { // Go to the node to delete
			prev_cralwer = cralwer;
			cralwer = cralwer->next;

			if (cralwer == 0) {
				printf("Can't be deleted : Out of range\n");
				return;
			}
		}

		if (cralwer == head) { // When deleting head
			head = head->next;
			delete cralwer;
		}
		else {
			prev_cralwer->next = cralwer->next;
			delete cralwer;
		}
	}

	string at(int index) {
		Node* cralwer = head; // Put the address of head into cralwer

		if (head == 0)
			return "Empty list";

		for (int i = 0; i < index; i++) { // Go to the node to index
			cralwer = cralwer->next;

			if (cralwer == 0)
				return "Out of range";
		}

		return to_string(cralwer->data);
	}

	string front() {
		if (head == 0)
			return "Empty list";

		return to_string(head->data);
	}

	string back() {
		if (rear == 0)
			return "Empty list";

		return to_string(rear->data);
	}

	void print_list() {
		Node* cralwer = head;
		while (cralwer != 0) {
			cout << cralwer->data << " ";
			cralwer = cralwer->next;
		}
		cout << "\n";
	}
};

int main(void) {
	my_SLL list1;
	cout << list1.at(0) << "\n";

	for (int i = 0; i <= 3; i++)
		list1.push_back(i);
	for (int i = 4; i <= 7; i++)
		list1.push_front(i);

	list1.print_list();

	list1.delete_node(1);
	cout << "After deleting a node : ";
	list1.print_list();

	list1.insert(1, 9);
	cout << "After inserting a node : ";
	list1.print_list();

	cout << list1.at(1) << "\n";

	cout << list1.front() << "\n";
	cout << list1.back() << "\n";
}